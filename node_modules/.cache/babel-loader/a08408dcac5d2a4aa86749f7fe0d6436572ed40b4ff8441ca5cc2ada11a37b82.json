{"ast":null,"code":"import React from\"react\";import{useState,useCallback}from\"react\";export const useHttp=()=>{const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[process,setProcess]=useState(\"waiting\");/* текущий процесс - текущее состояние компонента */const request=useCallback(async function(url){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"GET\";let body=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let headers=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{\"Content-Type\":\"application/json\"};setLoading(true);setProcess(\"loading\");try{const response=await fetch(url,{method,body,headers});//этот хук будет только отправлять запрос, но не будет обрабатывать его при помощи .then, .catch\nif(!response.ok){throw new Error(\"Could not fetch \".concat(url,\", status: \").concat(response.status));}const data=await response.json();setLoading(false);return data;}catch(e){setLoading(false);setError(e.message);setProcess(\"error\");throw e;}},[]);// мы предполагаем, чтобы эту функцию будем помешать внутрь другого компонента, поэтому, чтобы не совершать лишних запросов, будем использовать мемоизироанную версию\nconst clearError=useCallback(()=>{setError(null);setProcess(\"loading\");},[]);return{loading,request,error,clearError,process,setProcess};};","map":{"version":3,"names":["React","useState","useCallback","useHttp","loading","setLoading","error","setError","process","setProcess","request","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","clearError"],"sources":["C:/Users/AMD Ryzen 5 2600/Desktop/Программирование/Новая папка/FrontEnd/MARVEL/MARVEL-main/src/hooks/http.hook.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [process, setProcess] =\r\n    useState(\"waiting\"); /* текущий процесс - текущее состояние компонента */\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      setProcess(\"loading\");\r\n      try {\r\n        const response = await fetch(url, { method, body, headers }); //этот хук будет только отправлять запрос, но не будет обрабатывать его при помощи .then, .catch\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  ); // мы предполагаем, чтобы эту функцию будем помешать внутрь другого компонента, поэтому, чтобы не совершать лишних запросов, будем использовать мемоизироанную версию\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { loading, request, error, clearError, process, setProcess };\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAE7C,MAAO,MAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGJ,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACK,KAAK,CAAEC,QAAQ,CAAC,CAAGN,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CACzBR,QAAQ,CAAC,SAAS,CAAC,CAAE,oDAEvB,KAAM,CAAAS,OAAO,CAAGR,WAAW,CACzB,eACES,GAAG,CAIA,IAHH,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,IACd,CAAAG,IAAI,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,IACX,CAAAI,OAAO,CAAAJ,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAEhDR,UAAU,CAAC,IAAI,CAAC,CAEhBI,UAAU,CAAC,SAAS,CAAC,CACrB,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACR,GAAG,CAAE,CAAEC,MAAM,CAAEI,IAAI,CAAEC,OAAQ,CAAC,CAAC,CAAE;AAE9D,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,oBAAAC,MAAA,CAAoBX,GAAG,eAAAW,MAAA,CAAaJ,QAAQ,CAACK,MAAM,CAAE,CAAC,CACvE,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAElCpB,UAAU,CAAC,KAAK,CAAC,CAEjB,MAAO,CAAAmB,IAAI,CACb,CAAE,MAAOE,CAAC,CAAE,CACVrB,UAAU,CAAC,KAAK,CAAC,CACjBE,QAAQ,CAACmB,CAAC,CAACC,OAAO,CAAC,CACnBlB,UAAU,CAAC,OAAO,CAAC,CACnB,KAAM,CAAAiB,CAAC,CACT,CACF,CAAC,CACD,EACF,CAAC,CAAE;AAEH,KAAM,CAAAE,UAAU,CAAG1B,WAAW,CAAC,IAAM,CACnCK,QAAQ,CAAC,IAAI,CAAC,CACdE,UAAU,CAAC,SAAS,CAAC,CACvB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEL,OAAO,CAAEM,OAAO,CAAEJ,KAAK,CAAEsB,UAAU,CAAEpB,OAAO,CAAEC,UAAW,CAAC,CACrE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}