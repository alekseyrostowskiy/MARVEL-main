{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [process, setProcess] = useState(\"waiting\"); /* текущий процесс - текущее состояние компонента */\n\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = {\n    \"Content-Type\": \"application/json\"\n  }) => {\n    setLoading(true);\n    setProcess(\"loading\");\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      }); //этот хук будет только отправлять запрос, но не будет обрабатывать его при помощи .then, .catch\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n      const data = await response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      setProcess(\"error\");\n      throw e;\n    }\n  }, []); // мы предполагаем, чтобы эту функцию будем помешать внутрь другого компонента, поэтому, чтобы не совершать лишних запросов, будем использовать мемоизироанную версию\n\n  const clearError = useCallback(() => {\n    setError(null);\n    setProcess(\"loading\");\n  }, []);\n  return {\n    loading,\n    request,\n    error,\n    clearError,\n    process,\n    setProcess\n  };\n};\n_s(useHttp, \"XXP3ew/QifOermLw79YCJg7VQIU=\");","map":{"version":3,"names":["React","useState","useCallback","useHttp","_s","loading","setLoading","error","setError","process","setProcess","request","url","method","body","headers","response","fetch","ok","Error","status","data","json","e","message","clearError"],"sources":["C:/Users/AMD Ryzen 5 2600/Desktop/Программирование/Новая папка/FrontEnd/MARVEL/MARVEL-main/src/hooks/http.hook.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [process, setProcess] =\r\n    useState(\"waiting\"); /* текущий процесс - текущее состояние компонента */\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      setProcess(\"loading\");\r\n      try {\r\n        const response = await fetch(url, { method, body, headers }); //этот хук будет только отправлять запрос, но не будет обрабатывать его при помощи .then, .catch\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  ); // мы предполагаем, чтобы эту функцию будем помешать внутрь другого компонента, поэтому, чтобы не совершать лишних запросов, будем использовать мемоизироанную версию\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { loading, request, error, clearError, process, setProcess };\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GACzBT,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;;EAEvB,MAAMU,OAAO,GAAGT,WAAW,CACzB,OACEU,GAAG,EACHC,MAAM,GAAG,KAAK,EACdC,IAAI,GAAG,IAAI,EACXC,OAAO,GAAG;IAAE,cAAc,EAAE;EAAmB,CAAC,KAC7C;IACHT,UAAU,CAAC,IAAI,CAAC;IAEhBI,UAAU,CAAC,SAAS,CAAC;IACrB,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;QAAEC,MAAM;QAAEC,IAAI;QAAEC;MAAQ,CAAC,CAAC,CAAC,CAAC;;MAE9D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,mBAAkBP,GAAI,aAAYI,QAAQ,CAACI,MAAO,EAAC,CAAC;MACvE;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElChB,UAAU,CAAC,KAAK,CAAC;MAEjB,OAAOe,IAAI;IACb,CAAC,CAAC,OAAOE,CAAC,EAAE;MACVjB,UAAU,CAAC,KAAK,CAAC;MACjBE,QAAQ,CAACe,CAAC,CAACC,OAAO,CAAC;MACnBd,UAAU,CAAC,OAAO,CAAC;MACnB,MAAMa,CAAC;IACT;EACF,CAAC,EACD,EACF,CAAC,CAAC,CAAC;;EAEH,MAAME,UAAU,GAAGvB,WAAW,CAAC,MAAM;IACnCM,QAAQ,CAAC,IAAI,CAAC;IACdE,UAAU,CAAC,SAAS,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEL,OAAO;IAAEM,OAAO;IAAEJ,KAAK;IAAEkB,UAAU;IAAEhB,OAAO;IAAEC;EAAW,CAAC;AACrE,CAAC;AAACN,EAAA,CA5CWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}