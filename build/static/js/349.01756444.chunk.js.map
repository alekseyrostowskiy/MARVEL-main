{"version":3,"file":"static/js/349.01756444.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/Avengers.png\";\nimport avengersLogo from \"../../resources/img/Avengers_logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./comicsList.scss\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n      break;\n    case \"loading\":\n      return newItemLoading ? (\n        <Component />\n      ) : (\n        <Spinner />\n      ); /* создали отдельную функцию, потому что наш компонент работает немножко иначе из-за наличия newItemLoading  */\n      break;\n    case \"confirmed\":\n      return <Component />;\n      break;\n    case \"error\":\n      return <ErrorMessage />;\n      break;\n  }\n};\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [offset, setOffset] = useState(1);\n  const [comicsEnded, setComicsEnded] = useState(false);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n\n  const { getAllComics, loading, error, clearError, process, setProcess } =\n    useMarvelService();\n\n  useEffect(() => {\n    updateComicsList(offset, true);\n  }, []);\n\n  const updateComicsList = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset)\n      .then(onComicsListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n    clearError();\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n\n    setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n    setNewItemLoading(true);\n    setOffset((offset) => offset + 9);\n    setComicsEnded(ended);\n  };\n\n  function renderComicsList(comicsList) {\n    const items = comicsList.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li className=\"comics__item\" tabIndex={0} key={i}>\n          <Link to={`/comics/${item.id}`}>\n            <img\n              src={item.thumbnail}\n              alt={item.name}\n              className=\"comics__item-img\"\n            />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      );\n    });\n    return <ul className=\"comics__grid\">{items}</ul>;\n  }\n\n  return (\n    <div className=\"comics__list\">\n      {setContent(process, () => renderComicsList(comicsList), newItemLoading)}\n      <button\n        className=\"button button__main button__long\"\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n      >\n        <div className=\"inner\" onClick={() => updateComicsList(offset)}>\n          load more\n        </div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Page with list of uor comics\" />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import React from \"react\";\r\nimport { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [process, setProcess] =\r\n    useState(\"waiting\"); /* текущий процесс - текущее состояние компонента */\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      setProcess(\"loading\");\r\n      try {\r\n        const response = await fetch(url, { method, body, headers }); //этот хук будет только отправлять запрос, но не будет обрабатывать его при помощи .then, .catch\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  ); // мы предполагаем, чтобы эту функцию будем помешать внутрь другого компонента, поэтому, чтобы не совершать лишних запросов, будем использовать мемоизироанную версию\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { loading, request, error, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp(); // берём сущности хука\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  // ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\r\n  const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","AppBanner","_jsxs","className","children","avengers","avengersLogo","setContent","process","Component","newItemLoading","Spinner","ComicsList","comicsList","setComicsList","useState","offset","setOffset","comicsEnded","setComicsEnded","setNewItemLoading","getAllComics","loading","error","clearError","setProcess","useMarvelService","useEffect","updateComicsList","initial","then","onComicsListLoaded","newComicsList","ended","length","items","map","item","i","imgStyle","thumbnail","tabIndex","Link","to","concat","id","name","title","price","renderComicsList","onClick","ComicsPage","_Fragment","Helmet","content","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getCharacterByName","getComic"],"sourceRoot":""}