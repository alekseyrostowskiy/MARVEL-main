{"version":3,"file":"static/js/72.2a79bb4c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/SetContent.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useParams, Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/SetContent\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n  /* вроде как это компонент высшего порядка */\r\n  const { id } = useParams();\r\n  const [data, setData] = useState(null);\r\n\r\n  const { getComic, getCharacter, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData();\r\n  }, [id]);\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    switch (dataType) {\r\n      case \"comic\":\r\n        getComic(id)\r\n          .then(setData)\r\n          .then(() => setProcess(\"confirmed\"));\r\n        break;\r\n      case \"character\":\r\n        getCharacter(id)\r\n          .then(setData)\r\n          .then(() => setProcess(\"confirmed\"));\r\n    }\r\n  };\r\n\r\n  return <>{setContent(process, Component, data)}</>;\r\n};\r\n\r\nexport default SinglePage;\r\n","import React from \"react\";\r\nimport { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [process, setProcess] =\r\n    useState(\"waiting\"); /* текущий процесс - текущее состояние компонента */\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      setProcess(\"loading\");\r\n      try {\r\n        const response = await fetch(url, { method, body, headers }); //этот хук будет только отправлять запрос, но не будет обрабатывать его при помощи .then, .catch\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  ); // мы предполагаем, чтобы эту функцию будем помешать внутрь другого компонента, поэтому, чтобы не совершать лишних запросов, будем использовать мемоизироанную версию\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { loading, request, error, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp(); // берём сущности хука\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  // ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\r\n  const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n      break;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n      break;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n      break;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n      break;\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","_Fragment","children","setContent","request","useHttp","loading","setLoading","error","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getCharacterByName","getAllComics","Skeleton","_jsxs","className","Spinner"],"sourceRoot":""}